#!/usr/bin/env bash

VERSION=3.1.7
PLATFORM_HOME=/srv/platform
BOOTSTRAP_BRANCH=master
BOOTSTRAP_REPO=https://github.com/rockstat/bootstrap.git
BOOTSTRAP_DIR=/srv/platform/bootstrap
BOOTSTRAP_BINDIR=${BOOTSTRAP_DIR}/bin
KICKSTART=${BOOTSTRAP_BINDIR}/kickstart
KICKSTART_CMD="curl -s https://raw.githubusercontent.com/rockstat/bootstrap/${BOOTSTRAP_BRANCH}/bin/kickstart | sudo -E bash -\n"
BINALIAS=/usr/local/bin/rockstat
REPORT_COLLECTOR=https://bolt.rstat.org/upload
TARGET_DIR=/srv/platform
INSTALL_LOG=$(mktemp /tmp/platform-setup.XXXXXXXX)
FACT_CONF=/etc/ansible/facts.d/config.fact

# state vars
DOMAIN=""
USERNAME=""
EMAIL=""
ADMIN_PASSWORD=""
DEF_HOSTALIAS="rstat"
HOSTALIAS="$DEF_HOSTALIAS"
INSTALLED=""

# setup state vars
ROLES_UPDATED=0

# Preventing "bash: event not found" error
set +H
# Any subsequent(*) commands which fail will cause the shell script to exit immediately
set -e

################################################################################
# 2. Library
################################################################################

umask 022

if test -t 1; then # if terminal
    ncolors=$(which tput > /dev/null && tput colors) # supports color
    if test -n "$ncolors" && test $ncolors -ge 8; then
        termcols=$(tput cols)
        bold="$(tput bold)"
        underline="$(tput smul)"
        standout="$(tput smso)"
        normal="$(tput sgr0)"
        black="$(tput setaf 0)"
        red="$(tput setaf 1)"
        green="$(tput setaf 2)"
        yellow="$(tput setaf 3)"
        blue="$(tput setaf 4)"
        magenta="$(tput setaf 5)"
        cyan="$(tput setaf 6)"
        white="$(tput setaf 7)"
    fi
fi

base_print() {
    echo -e "\n$1\n"
}

print_status() {
  base_print "${cyan}${bold}>> ${blue}${1}${normal}"
}

print_error() {
  base_print "${red}${bold}!> ${1}${normal}"
}

print_ok() {
  echo "${cyan}${bold}>> ${normal}Ok"
}

################################################################################
## Request root and banner
################################################################################

clear
base_print """
${cyan}${bold}##${normal}
${cyan}${bold}## Rockstat Bootstrap${normal}
${cyan}${bold}##${normal}
${cyan}${bold}## ${normal}version ${VERSION}
${cyan}${bold}## ${normal}logs output $INSTALL_LOG
${cyan}${bold}##${normal}"""

################################################################################
## Checks
################################################################################

# check credentials
if [ ! "$UID" -eq 0 ]; then print_error "Run as root or insert 'sudo -E' before 'bash'"; exit 1; fi
# check debian-like
if [[ ! -f /etc/debian_version ]]; then print_error "Target OS is Ubutu 16.04"; exit 1; fi

################################################################################
## System deps
################################################################################

export DEBIAN_FRONTEND=noninteractive
update_bootstrap() {
  if [[ -d "$BOOTSTRAP_DIR" ]]; then
    print_status "Updating Bootstrap repository"
    cd $BOOTSTRAP_DIR
    git pull --rebase
  else
    print_status "Cloning Bootstrap repository"
    mkdir -p $TARGET_DIR
    cd $TARGET_DIR
    echo $(pwd)
    git clone $BOOTSTRAP_REPO
  fi
}

setup_langvars() {
  export LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export LANGUAGE=en_US.UTF-8
  export LC_TYPE=en_US.UTF-8
}

setup_locale() {
  print_status "Setting en_US.UTF-8 locale"
  echo -e 'LANGUAGE=en_US.UTF-8\nLANG=en_US.UTF-8\nLC_ALL=en_US.UTF-8\nLC_TYPE=en_US.UTF-8' > /etc/default/locale
  locale-gen en_US.UTF-8 > $INSTALL_LOG
  dpkg-reconfigure locales > $INSTALL_LOG
  setup_langvars
  print_ok
}

setup_system_packages() {
  print_status "Updating packages registry"
  apt-get -yqq update
  print_ok

  print_status "Installing requirements"
  apt-get -yqq install apt-utils > $INSTALL_LOG
  apt-get -yqq install dialog whiptail nano \
    curl git locales \
    python3 python3-dev python3-pip python3-netaddr python3-setuptools python3-requests \
    build-essential libffi-dev ca-certificates zlib1g-dev libssl-dev openssl > $INSTALL_LOG
  print_ok
}

setup_python_packages() {
  print_status "Installing required python packages"
  pip3 -q install wheel
  pip3 -q install ansible prompt_toolkit cryptography==1.9 validators passlib netaddr
  print_ok
}

setup_runner() {
  rm -f $BINALIAS
  echo -e "#!/usr/bin/env bash\n${KICKSTART_CMD}\n" > $BINALIAS
  chmod +x $BINALIAS
}

setup_playbook() {
  if [ $ROLES_UPDATED -eq 1 ]; then return 1; fi
  print_status "Updating ansible roles"
  cd $BOOTSTRAP_DIR
  ansible-galaxy install -r install_roles.yml --force > $INSTALL_LOG
  print_ok
  ROLES_UPDATED=1
}

################################################################################
## Dialogs
################################################################################

# whiptail --title "Radio list example" --radiolist \
# "Choose user's permissions" 20 78 4 \
# "NET_OUTBOUND" "Allow connections to other hosts" ON \
# "NET_INBOUND" "Allow connections from other hosts" OFF \
# "LOCAL_MOUNT" "Allow mounting of local devices" OFF \
# "REMOTE_MOUNT" "Allow mounting of remote devices" OFF

show_dialog(){
  whiptail --title "$1" --msgbox "$2" 8 78
}

whiptailInput() {
    eval local init="\$$1"
    case "$1" in
        *PASSWORD*) local prompt='passwordbox'; showval="" ;;
        *) local prompt='inputbox'; showval=$init; ;;	
    esac
    local value=$(whiptail --title "$2" --${prompt} "$3" $4 $5 $showval 3>&1 1>&2 2>&3)
    local rc=$?
    if [ $rc = 0 ]; then
      if [ $prompt == 'passwordbox' ]; then
        local confirmation=$(whiptail --title "$2 / confirmation" --${prompt} "$3" $4 $5 $showval 3>&1 1>&2 2>&3)
        local rc=$?
        if [ $rc = 0 ]; then
          if [ "$value" != "$init" ]; then
            if [ $value == $confirmation ]; then
              if [[ -n ${value// } ]]; then
                enc=$(openssl passwd -apr1 ${value})
                eval $1="'$enc'"
                save_config
              fi
            fi
          fi
        fi
      else
        eval $1="'$value'"
        save_config
      fi
    fi
}

request_domain(){
  whiptailInput "DOMAIN" "Domain" "Please enter domain for your tracker." 8 78
}

request_hostalias(){
  whiptailInput "HOSTALIAS" "Short hostname" "Shot server hostname that you can see at command line prompt." 8 78
}

request_email(){
  whiptailInput "EMAIL" "Email" "Email required for issuing letsencrypt SSL and GIT." 8 78
}

request_username(){
  whiptailInput "USERNAME" "User name" "Provide your first and last name. Will be used in git configuration." 8 78
}

request_password(){
  whiptailInput "ADMIN_PASSWORD" "Admin password" "Provide secret password for admin user." 8 78
}

update_reboot_dialog(){
  show_dialog "System upgrade" "After upgrade complete server will be rebooted and you need to connect agant to continue."
}


################################################################################
## Actions
################################################################################

run_platform_playbook() {
  setup_playbook
  print_status "Starting ansible"
  ansible-playbook platform.yml --connection=local --tags=${1} -e 'ansible_python_interpreter=/usr/bin/python3'
  if [ $? -eq 0 ]; then print_status "Done"; else print_error "FAILED"; exit 1; fi
}

run_upgrade_playbook() {
  print_status "Starting ansible"
  ansible-playbook os_upgrade.yml --connection=local
  exit 1
}

################################################################################
## Configs
################################################################################

load_config(){
  if [ -a "$FACT_CONF" ]; then
    INSTALLED=$(awk -F "=" '/installed/ {print $2}' $FACT_CONF)
    DOMAIN=$(awk -F "=" '/domain/ {print $2}' $FACT_CONF)
    EMAIL=$(awk -F "=" '/email/ {print $2}' $FACT_CONF)
    ADMIN_PASSWORD=$(awk -F "=" '/admin_password/ {print $2}' $FACT_CONF)
    USERNAME=$(awk -F "=" '/username/ {print $2}' $FACT_CONF)
    HOSTALIAS=$(awk -F "=" '/hostalias/ {print $2}' $FACT_CONF)
    if [[ -z "$HOSTALIAS" ]]; then HOSTALIAS=$DEF_HOSTALIAS; fi
  fi
}

save_inventory(){
  cd "$BOOTSTRAP_DIR"
  echo """
[private]
${HOSTALIAS} ansible_host=${DOMAIN}

[rockstat]
${HOSTALIAS}
""" > inventory/private
}

save_config(){
  save_inventory
  mkdir -p $(dirname $FACT_CONF)
  echo """[general]
domain=${DOMAIN}
email=${EMAIL}
admin_password=${ADMIN_PASSWORD}
hostalias=${HOSTALIAS}
username=${USERNAME}
installed=${INSTALLED}""" > $FACT_CONF
}

################################################################################
## Executing
################################################################################

setup_platform(){
  setup_langvars
  setup_system_packages
  setup_locale
  update_bootstrap
  setup_python_packages
  setup_runner
  INSTALLED=$VERSION
  save_config
}

update_platform(){
  update_bootstrap
  setup_runner
}

initialize(){
  while [ -z "${DOMAIN// }" ]; do request_domain
  done
  while [ -z "${EMAIL// }" ]; do request_email
  done
  while [ -z ${ADMIN_PASSWORD// } ]; do request_password
  done
  while [ -z ${USERNAME// } ]; do request_username
  done
  while [ -z ${HOSTALIAS// } ]; do request_hostalias
  done
}

if [[ -a "$FACT_CONF" ]]; then
  print_status "Reading local configuration"
  load_config
fi

print_status "Preparing system"
if [ "$INSTALLED" == "$VERSION" ]; then update_platform; fi
while [ "$INSTALLED" != "$VERSION" ]; do setup_platform
done


MENU_TEXT=$(cat <<'HEREDOC'
Choose your option:
--------------------------------------------------------
- New installation:       sequentially 1, 2, 3
- Upgrade system and 
  platform:               option 3
- Upgrade platform:       option 4
- Change admin password:  sequentially 11, 14 or 11, 3
--------------------------------------------------------
HEREDOC
)

menu() {
  # --menu <text> <height> <width> <listheight>
  OPTION=$(whiptail --title "Rockstat Shell Script Menu" --menu "${MENU_TEXT}" 30 60 14 \
  "1"  "    Upgrade OS" \
  "2"  "    Issue SSL certificate" \
  "3"  "    Install/upgrade system and platform" \
  "4"  "    Upgrade only platform components" \
  "30" "    Setup OpenVPN server" \
  "11" "    Change Admin Password" \
  "12" "    Change Domain '${DOMAIN}'" \
  "13" "    Change Short hostname '${HOSTALIAS}'" \
  "14" "    Change Email '${EMAIL}'" \
  "15" "    Change Name '${USERNAME}'" \
  "20" "    Apply new admin password" \
  "0"  "    Exit"  3>&1 1>&2 2>&3)
  EXITCODE=$?
  [[ "$EXITCODE" = 1 ]] && break;
  [[ "$EXITCODE" = 255 ]] && break;
  # echo "exitcode: $EXITCODE"

  case "$OPTION" in
    "1") update_reboot_dialog; run_upgrade_playbook ;;
    "2") run_platform_playbook ssl ;;
    "3") run_platform_playbook full_setup ;;
    "4") run_platform_playbook pservice,ppart ;;
    "11") request_password ;;
    "12") request_domain ;;
    "13") request_hostalias ;;
    "14") request_email ;;
    "15") request_username ;;
    "20") run_platform_playbook nginx ;;
    "30") run_platform_playbook ovpn-server ;;
    "0") exit 1 ;;
    *) echo "Unknown action '${OPTION}'" ;;	
  esac
  # sleep 0.5
}

# initial configuration
initialize
# start menu loop
while [ 1 ]; do
  menu
done
